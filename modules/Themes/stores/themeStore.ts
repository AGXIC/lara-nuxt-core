import { defineStore } from 'pinia'
import type { MenuItem } from 'primevue/menuitem'
import type { DefineComponent } from 'vue'
import type { RouteLocationAsRelativeGeneric } from 'vue-router'

interface IMenuItem {
  label: string
  to?: RouteLocationAsRelativeGeneric
  icon?: string | DefineComponent
  can: boolean
}

type childItem = Omit<IMenuItem, 'icon' | 'to'> & {
  to: RouteLocationAsRelativeGeneric
  active?: boolean // generated by computed mapper
}

export declare type TMenuItem = IMenuItem & {
  children?: childItem[]
}

export const useThemeStore = defineStore('themeStore', () => {
  const router = useRouter()
  const runtime = useRuntimeConfig()

  const auth = useAuthStore()

  const navItems = ref<TMenuItem[]>([])
  const drawerVisible = shallowRef(false)
  const profileItems = ref<MenuItem[]>([])

  const getAccessibleNavItems = computed(
    () =>
      navItems.value
        .filter(({ can }) => can)
        .map((item) => ({
          ..._omit(item, ['children']),
          ...(item.to
            ? {
                active:
                  router.currentRoute.value.fullPath ===
                    router.resolve(item.to).fullPath ||
                  !!item.children?.find(
                    (child) =>
                      router.currentRoute.value.fullPath ===
                      router.resolve(child.to).fullPath,
                  ),
              }
            : {}),
          ...(item.children
            ? {
                children: item.children.map((child) => ({
                  ...child,
                  active:
                    router.currentRoute.value.fullPath ===
                    router.resolve(child.to).fullPath,
                })),
              }
            : {}),
        })) || [],
  )
  const getBreadcrumb = computed<MenuItem[]>(() => {
    const activeItem = getAccessibleNavItems.value.find(({ active }) => active)
    const child = activeItem?.children?.find(({ active }) => active)

    return [
      {
        label: activeItem?.label,
        command() {
          drawerVisible.value = true
        },
        icon: _isString(activeItem?.icon) ? activeItem?.icon : undefined,
      },
      ...(child
        ? [
            {
              label: child.label,
            },
          ]
        : []),
    ]
  })
  const getProfileItems = computed(() => [
    {
      command() {
        router.push(runtime.public.dashboardRoute)
      },
      label: t('Dashboard'),
      icon: 'tabler:dashboard',
    },
    {
      command() {
        router.push('/')
      },
      label: t('Home Page'),
      icon: 'tabler:smart-home',
    },
    ...profileItems.value,
    { separator: true },
    {
      command() {
        auth.$patch({ showLogout: true })
      },
      label: t('Logout Account'),
      icon: 'tabler:logout',
    },
  ])

  return {
    // states
    navItems,
    drawerVisible,
    profileItems,
    // getters
    getAccessibleNavItems,
    getBreadcrumb,
    getProfileItems,
  }
})
